<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB0AAAEAIAAcDwAAFgAAACgAAAAgAAAAOgAAAAEAIAAAAAAAgA4AAMIOAADCDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALyYZADAnGhcxJxmYLyUXuy8lF7ovJRe6LyUXui8l
        F7ovJRe6LyUXui8lF7ovJRe6LyUXui8lF7owJRe6MScZrS8mGTMwJhgAiYBnAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwJhgALSMVQD41JvV7e2n/hIZy/4OF
        cv+DhXL/g4Vy/4OFcv+DhXL/g4Vy/4OFcv+DhXL/g4Vy/4OEcf9MRjb/LyQWczMoGACJgGcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEnGgAtIxUlPjUm4qqy
        nf/M2MD/yta+/8nWvv/J1r7/yda+/8nWvv/J1r7/yta+/8nWvf/K177/wcy1/1ROPvksIhNQMigZAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqJBoAPCoUAC4l
        GCYwJRbRSUIy/1hTQ/9XUkP/V1JD/1dSQ/9XUkL/V1JC/1dSQ/9XUkP/V1JD/1hTQ/9RSzv/NCkb7y0j
        FksyLy0BLiYbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALyYaAC8m
        GwgtIhVeNSsd01pWRv2OkX7/pKuW/6Srlv+kq5b/pKuW/6Srlv+jq5b/pKuW/6Srlv+kq5b/pKuW/5ec
        iP9pZ1b/PDQl5i4jFYItJBgVLyUXAB0ZFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTw7ADAl
        GQAvJRkRLiMWj0dAMfaQlIH/x9O7/9Lgx//S4cf/0uDH/9Lgx//S4cf/0uDH/9Lgx//S4Mf/0uHH/9Lg
        xv/S4Mb/0uDH/83awf+lrJf/V1NC/TAmF7YtIxYoMSYXACIfFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAvJhkALiUZDi8kFptVUED9sLmj/9Lgxv/Q3sX/0N7E/9DexP/Q3sT/0N7E/9DexP/Q3sT/0N7E/9De
        xP/Q3sT/0N7E/9DdxP/Q3cT/0N7E/9Lgxv/AzLT/bGta/zIoGsYtIxYpLyQWACkmIwAAAAAAAAAAAAAA
        AAAAAAAALSUaACslHgMtIxWCU00+/LfBqv/P3cP/z9zD/9DexP/Q3sT/0N7E/9DexP/Q3sT/0N7E/9De
        xP/Q3sT/0N7E/9DexP/Q3sT/0N7E/9DexP/Q3cT/0N7E/9Hfxv/H1Lv/bmxb/zAmGLctIxcWLyUYAAAA
        AAAAAAAAAAAAAC4oIQAxJhcAKyEUS0I7LO+rtJ7/zdvA/6iwjv+9yKv/0d/G/9DexP/Q3sT/0N7E/9De
        xP/Q3sT/0N7E/9DexP/Q3sT/0N7E/9DexP/Q3sT/0N7E/8/dxP/Q3sT/0N7E/9Hfxf/BzbX/WVRE/i0i
        FIMlIh8BLSUaAAAAAAAAAAAALSQYACsiFhExJxm+hYh1/8rXvP+9yKv/m6B9/7C4mf/G0rf/ztzC/9De
        xP/Q3sT/0N7E/9Hfxf/R38b/0d/F/9Hgxv/Q3sT/z93E/8/dxP/Q3cT/0N3E/9DexP/Q3cT/z93E/9Lg
        xv+mrpn/PjUm5iwhFDQwJRgANTEqADcwLAAyJhcAKh8SV1BLO/nBzbX/sLiZ/5mdev+YnHj/mZ56/6Cm
        g//J1rr/0d/G/9DexP/R38X/tb+o/3x8a/9zcmH/oqqV/87cw//Q3sT/0N7F/9Dexf/Q3sT/0N7E/9De
        xP/Q3sT/0N7E/87cw/9vbl3/LSMUkxsdIAEtJxwALSYbACchGQYvJBerhIZz/9Lgx//F0bX/t8Gj/5ug
        fP+stJP/wMuu/8jVu//BzbX/0d7F/77Jsv9XUkP/bWxb/3t8av9NRzj/o6qV/9Lgx//F0rn/xtK6/9De
        xf/Q3sT/0N7E/9DexP/Q3sT/0uDG/6evmf87MSPbKyEVIC8mGQAtJBgAKR8SJD01JuKwuaL/0uDG/9Hf
        xf/L2L3/oaeF/7rEpv/S4Mb/goRy/01GN/+utqD/w862/5qfi//M2cD/0uDH/6Srlv+xu6T/x9S7/2Ng
        T/9jYVD/xdK6/9Hfxf/Q3sT/0N7E/9DexP/Q3sT/xtO7/1VQQPsqHxFWMSYYADAmFwAqHxFOVE4++sbT
        uv/R3sX/0N7E/8/dw//H1Ln/zNm//8zZwP9bV0f/LCES/4+Tf//T4cj/0uDG/9DexP/Q3sT/0d/G/9Lg
        x/+4wqv/PjUm/zwzI/+2wKn/0eDG/9DexP/Q3sT/0N3E/9DdxP/R38X/dXVj/y0iFIw2JxIAMycXACsg
        EnVpZ1b/z93D/9DexP/Q3sT/0N7E/9Hexf/Q3sT/0N7F/5CTgP9cWEj/tb+o/9Hfxv/Q3sT/0N7E/9Dd
        xP/P3cT/0N7E/8nWvf9zc2H/bm5d/8jUvP/R3sX/0N7E/9DexP/Q3cT/0N3E/9Lgx/+Pk4D/MSYYsyki
        GAc3KBIALCEUj3l5Z//S4Mf/0d/F/9Hfxf/R3sX/0d7F/9Hexf/R3sX/z93E/8rXv//R38X/0N7F/9De
        xf/Q3sX/0N7F/9Dexf/Q3sX/0d/F/8zawf/M2cD/0d/F/9Hexf/R3sX/0N7F/9Dexf/Q3sX/0+HH/6Gn
        kv81Kx3HJR0SEAAA/wAuIxWdfn5s/8nVvf/H07v/x9O7/8bTu//H07v/x9O7/8bSu//G07v/x9O7/8bS
        uv/G0rr/xtK6/8bSuv/G0rr/xtK6/8bTu//H07v/x9O7/8fTu//H07v/x9O7/8fTu//H07v/xtO6/8bS
        uv/I1bz/oaiT/zgvINAlHBAWxpUxAC8kFpdCOiv/Ukw8/VFMPP9RTDz9Ukw8/VJMPP1STDz9Ukw8/VJM
        PP1STDz9Ukw8/VJMPP1RTDz9UUw8/VFMPP1RTDz9UUw7/lNNPf9VTz//VE8//1RPP/9UTj//UUw8/1FM
        PP1STDz9Ukw8/VJMPf1KQzP/MygayywjFxU1KRoALyUZKC0jFlQtIxV+MCUW5C0iFW4tIhVVLSMVVy0i
        FVcuIxVXLiMVVy0jFVctIhVXLSIVVy0iFVctIhRXLCIUVywhFFUsIhSRPDIj+pOLef+tpZH/rKOP/62k
        kP9rYVH/LSIUyiwiFVotIhVXLSIUVy0iFVgvJRg7KSIXAwAAAAAAAAAAMSYYADInGUAyJxjXLiQYIC0j
        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
</value>
  </data>
</root>